// db/db.js
const { Pool } = require('pg');
require('dotenv').config();

// Validar que todas las variables de entorno necesarias est√©n definidas
const requiredEnvVars = ['DB_USER', 'DB_HOST', 'DB_DATABASE', 'DB_PASSWORD', 'DB_PORT'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
    console.error('‚ùå ERROR: Faltan variables de entorno requeridas para la base de datos:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    console.error('\nüìù Crea un archivo .env con las siguientes variables:');
    console.error('   DB_USER=tu_usuario_supabase');
    console.error('   DB_HOST=db.tu_proyecto.supabase.co');
    console.error('   DB_DATABASE=postgres');
    console.error('   DB_PASSWORD=tu_password_supabase');
    console.error('   DB_PORT=5432');
    console.error('\nüí° Tambi√©n puedes usar .env.example como plantilla.');
    process.exit(1);
}

// Configuraci√≥n del pool de conexiones
const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    // Configuraciones adicionales para mejor rendimiento
    max: 20, // m√°ximo n√∫mero de conexiones en el pool
    idleTimeoutMillis: 30000, // tiempo m√°ximo que una conexi√≥n puede estar inactiva
    connectionTimeoutMillis: 2000, // tiempo m√°ximo para establecer una conexi√≥n
    ssl: {
        rejectUnauthorized: false // Necesario para Supabase
    }
});

// Eventos del pool
pool.on('connect', () => {
    console.log('‚úÖ Conectado a la base de datos PostgreSQL (Supabase)');
    console.log(`   üìç Host: ${process.env.DB_HOST}`);
    console.log(`   üóÑÔ∏è  Base de datos: ${process.env.DB_DATABASE}`);
    console.log(`   üë§ Usuario: ${process.env.DB_USER}`);
});

pool.on('error', (err) => {
    console.error('‚ùå Error inesperado en la conexi√≥n a la base de datos:', err);
    console.error('   üîç Verifica tu conexi√≥n a internet y las credenciales de Supabase');
    process.exit(-1);
});

// Funci√≥n para probar la conexi√≥n
const testConnection = async () => {
    let client;
    try {
        client = await pool.connect();
        const result = await client.query('SELECT NOW() as current_time, version() as db_version');
        console.log('‚úÖ Prueba de conexi√≥n exitosa');
        console.log(`   üïê Hora del servidor: ${result.rows[0].current_time}`);
        console.log(`   üóÑÔ∏è  Versi√≥n: ${result.rows[0].db_version.split(' ')[0]}`);
        return true;
    } catch (error) {
        console.error('‚ùå Error al probar la conexi√≥n:', error.message);
        console.error('   üîç Verifica:');
        console.error('      - Las credenciales en tu archivo .env');
        console.error('      - Que tu proyecto de Supabase est√© activo');
        console.error('      - Tu conexi√≥n a internet');
        return false;
    } finally {
        if (client) client.release();
    }
};

// Funci√≥n para cerrar el pool de conexiones
const closePool = async () => {
    try {
        await pool.end();
        console.log('‚úÖ Pool de conexiones cerrado correctamente');
    } catch (error) {
        console.error('‚ùå Error al cerrar el pool de conexiones:', error.message);
    }
};

module.exports = {
    pool,
    testConnection,
    closePool
};
